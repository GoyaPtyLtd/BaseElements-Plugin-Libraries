#!/usr/bin/env bash

# scripts/packages/build-functions
#   - is not an executable, it is intended to be sourced by other scripts.
#   - belongs as exactly "{project_root}/scripts/packages/build-functions".
#
# Sourcing this file will set the following variables:
#   OS                          - Operating system.
#                                 May be: Linux or Darwin
#   ARCH                        - Architecture.
#                                 May be: x86_64, aarch64, or arm64
#                                 (aarch64 only on Linux, arm64 only on macOS.)
#   JOBS                        - Number of parallel jobs.
#   PLATFORM                    - Platform calculated from OS+ARCH.
#                                 May be: linux, linuxARM, or macOS
#
#   PROJECT_ROOT                - The root of the project.
#   SOURCE_PLATFORM_ROOT        - Source directory for this platform.
#   HEADERS_ROOT                - Output directory for headers.
#   LIBRARIES_PLATFORM_ROOT     - Output directory for libraries for this platform.
#   FRAMEWORKS_ROOT             - Output directory for frameworks (macOS only).
#   PACKAGE_NAME                - Dirname of the package.
#   PACKAGE_DOWNLOAD_DIR        - Location to download package source to.
#   PACKAGE_SOURCE_DIR          - Location to unpack source to (includes PACKAGE_NAME).
#   BUILD_LOG                   - Filename to append build log to.
#
#   PACKAGE_FILE                - Full path to downloaded package. Set by fetch()
#   PACKAGE_ACTION              - Action specified on command line when called.

# Environment variables that may be set:
DEBUG=${DEBUG:-0} # Prefix DEBUG=1 to script to enable debug output.
FORCE_COLOUR=${FORCE_COLOUR:-0} # Prefix FORCE_COLOUR=1 to script to force colour output.

# Enforce that this file is sourced, not run.
(return 0 2>/dev/null) || {
    echo "This file is not meant to be run directly."
    exit 1
}

set -u      # Abort on undefined variables.

# Initialise terminal colours
COL_RED=$(tput setaf 1)
COL_GREEN=$(tput setaf 2)
COL_YELLOW=$(tput setaf 3)
# COL_CLEAR=$(tput sgr0)    # This does not play well with less -R
COL_CLEAR=$'\e[0m'

# Main function executed when this file is sourced.
#
build_functions_main() {
    trap _exit_handler EXIT

    start_timer "PACKAGE_TIMER"

    # Identify and set the OS/ARCH/JOBS/PLATFORM variables.
    _identify_os_arch

    # Identify common paths: PROJECT_ROOT, SOURCE_PLATFORM_ROOT, etc.
    _identify_common_paths

    print_debug "Debug enabled."
    print_debug "OS: ${OS} ARCH: ${ARCH} PLATFORM: ${PLATFORM}"

    # Remove any existing build log.
    if [[ -r "${BUILD_LOG}" ]]; then
        rm -f "${BUILD_LOG}"
    fi

    # Source the package variables.
    _unset_package_variables
    source ./package

    # Ensure all build functions are defined.
    _ensure_build_functions

    # Now parse any arguments passed to the script (may override variables).
    _parse_args "$@"

    print_debug "JOBS: ${JOBS}"

    # Perform package actions.
    case "${PACKAGE_ACTION}" in
        info)
            _display_package_info
            ;;
        all)
            deps_all
            fetch && clean_source
            _package_source_missing && unpack
            check_output || build
            ;;
        build)
            fetch && clean_source
            _package_source_missing && unpack
            check_output || build
            ;;
        clean)
            _package_source_missing || clean_source
            clean_output
            ;;
        clean-all)
            deps_clean_all
            _package_source_missing || clean_source
            clean_output
            ;;
        *)
            print_error "Unknown action: ${PACKAGE_ACTION}"
            exit 1
            ;;
    esac

    print_debug "Reached end of main function."
}

# --- Helper functions ---

# Fetch and verify a file with the provided URL, hash, and destination directory.
#
# Note that downloaded file path is always:
#   "${PACKAGE_DOWNLOAD_DIR}/$(basename "$URL")"
#
# Uses global variables:
#   PACKAGE_DOWNLOAD_DIR
#
# $1 - URL to fetch.
# $2 - Hash to verify.
# $3 - Destination directory.
#
# Returns 0 (true) if the file was downloaded, 1 otherwise.
fetch_and_verify_file() {
    local filename
    filename=$(basename "$1")

    # Check if the file already exists.
    if [[ -e "${PACKAGE_DOWNLOAD_DIR}/${filename}" ]]; then
        # Check the hash of the file.
        if ! _check_file_hash "${PACKAGE_DOWNLOAD_DIR}/${filename}" "$2"; then
            # Remove the file.
            rm -f "${PACKAGE_DOWNLOAD_DIR}/${filename}"
        else
            print_ok "Existing file verified: ${filename}"
            return 1
        fi
    fi

    # Download the file.
    print_ok "Downloading file: ${filename}"
    wget -O "${PACKAGE_DOWNLOAD_DIR}/${filename}" "$1" -q --show-progress
    local res=$?
    if [[ $res -ne 0 ]]; then
        print_error "Failed to download: ${1}"
        exit 1
    fi

    # Check the hash of the file.
    if ! _check_file_hash "${PACKAGE_DOWNLOAD_DIR}/${filename}" "$2"; then
        print_error "Download failed verification: ${PACKAGE_DOWNLOAD_DIR}/${filename}"
        exit 1
    fi

    print_ok "Download file verified: ${filename}"
    return 0
}

# Print a formatted message to stdout. No colours.
#
# $1 - Message to print.
print_plain() {
    _print "  " "$1"
}

# Print a formatted message to stdout. Uses green to signify success.
#
# $1 - Message to print.
print_ok() {
    if [[ $FORCE_COLOUR -eq 1 ]] || [[ -t 1 ]]; then
        # We are in a terminal, use colours.
        _print "${COL_GREEN}++${COL_CLEAR}" "$1"
    else
        _print "++" "$1"
    fi
}

# Print a formatted message to stdout. Uses red to signify an error.
#
# $1 - Message to print.
print_error() {
    if [[ $FORCE_COLOUR -eq 1 ]] || [[ -t 1 ]]; then
        # We are in a terminal, use colours.
        _print "${COL_RED}!!${COL_CLEAR}" "$1"
    else
        _print "!!" "$1"
    fi
}

print_debug() {
    if [[ $DEBUG -eq 0 ]]; then
        # No output, DEBUG is disabled.
        return
    fi
    if [[ ! -v PACKAGE_NAME ]]; then PACKAGE_NAME="-----"; fi
    if [[ $FORCE_COLOUR -eq 1 ]] || [[ -t 1 ]]; then
        # We are in a terminal, use colours.
        printf "[${COL_YELLOW}${PACKAGE_NAME}${COL_CLEAR}] ${COL_YELLOW}**${COL_CLEAR} %s\n" "$1"
    else
        printf "[${PACKAGE_NAME}] ** %s\n" "$1"
    fi
}

# Pretty print a time in seconds, in the format H:MM:SS.
#
# $1 - Time in seconds.
pretty_time() {
    local S=$1
    local H=$((S/3600))
    local M=$((S/60%60))
    local S=$((S%60))
    printf '%01d:%02d:%02d' $H $M $S
}

# Wait on supplied child process to complete, giving a progress indicator.
#
# $1 - PID of child process.
#
# Returns the exit code of the child process.
wait_progress() {
    local pid="$1"

    local start_time
    start_time=$(date +%s)

    if [[ -t 1 ]]; then
        # We are in a terminal, we can animate progress
        local throbber='-\|/'
        local i=0
        while kill -0 $pid 2>/dev/null; do
            i=$(( (i+1) % ${#throbber} ))
            printf "\r[${COL_YELLOW}%s${COL_CLEAR}] %s " "${PACKAGE_NAME}" "${throbber:$i:1}"
            sleep 0.5
        done
        printf "\r"
    else
        # We are not in a terminal, use plain output.
        # Output 60 dots, 5 seconds apart on a line =~ 5 mins
        # Newline every 60 dots with a prefix of the approx mins
        local dots=0
        local approx_mins=0
        printf "[0]"
        while kill -0 $pid 2>/dev/null; do
            dots=$(( (dots+1) % 60 ))
            if [[ $dots -eq 0 ]]; then
                approx_mins=$(( approx_mins+5 ))
                printf "\n[%s]" "${approx_mins}"
            fi
            printf "."
            sleep 5
        done
        printf "\n"
    fi

    wait "$pid"
    local rc=$?

    local stop_time
    stop_time=$(date +%s)

    local str_time
    str_time=$(pretty_time $((stop_time - start_time)))
    print_plain "Elapsed time: $str_time"

    return $rc
}


# Start a timer.
#
# $1 - Name of timer.
start_timer() {
    local timer_name=$1

    # Watch very carefully . . . there is nothing up my sleeves . . .
    declare -g "$timer_name"="$(date +%s)"  # Start time in seconds since epoch
    # Hey presto! We have declared a global variable from a function argument!
}

# Stop a timer.
#
# $1 - Name of timer.
#
# Outputs the elapsed seconds since the start of the timer.
stop_timer() {
    local timer_name=$1

    # This is where we put the rabbit back into the hat . . .
    local start_time=${!timer_name}

    local stop_time
    stop_time=$(date +%s)

    echo $((stop_time - start_time))
}

# Stop a timer, and print an 'ok' message.
#
# $1 - Name of timer.
# $2 - Message to print. The formatted time will be appended.
stop_timer_ok() {
    local str_time
    str_time=$(pretty_time "$(stop_timer "$1")")

    print_ok "${2} ${str_time}"
}

# Stop a timer, and print an 'error' message.
#
# $1 - Name of timer.
# $2 - Message to print. The formatted time will be appended.
stop_timer_error() {
    local str_time
    str_time=$(pretty_time "$(stop_timer "$1")")

    print_error "${2} ${str_time}"
}

# --- "builtin" functions ---

# Fetch source package.
#
# Uses global variables:
#   SOURCE_URL              - package variable
#   SOURCE_HASH             - package variable
#   PACKAGE_NAME
#   PACKAGE_DOWNLOAD_DIR
#
# Sets global variables:
#   PACKAGE_FILE            - Full path to downloaded package.
#   BUILTIN_FETCH_NONE      - only defined if builtin function did nothing.
#
# Returns 0 (true) if the file was downloaded, 1 otherwise.
builtin_fetch() {
    if [[ -z "${SOURCE_URL}" ]]; then
        BUILTIN_FETCH_NONE=1
        print_debug "builtin_fetch(): SOURCE_URL is not set"
        return 1    # Return 1 to indicate we did not download.
    fi

    PACKAGE_FILE="${PACKAGE_DOWNLOAD_DIR}/$(basename "${SOURCE_URL}")"

    fetch_and_verify_file "${SOURCE_URL}" "${SOURCE_HASH}" "${PACKAGE_DOWNLOAD_DIR}"
    return $?
}

# Unpack source package. Only called when ${PACKAGE_SOURCE_DIR} is missing.
#
# Uses global variables:
#   PACKAGE_FILE            - from fetch()
#   BUILTIN_UNPACK_NONE     - only defined if builtin function did nothing.
builtin_unpack() {
    if [[ ! -v PACKAGE_FILE ]] || [[ -z "${PACKAGE_FILE}" ]]; then
        BUILTIN_UNPACK_NONE=1
        print_debug "builtin_unpack(): PACKAGE_FILE is unset/empty."
        return
    fi

    local mime_type
    mime_type=$(file --mime-type --brief "${PACKAGE_FILE}")

    local filename
    filename=$(basename "${PACKAGE_FILE}")

    local file_type="unknown"

    case "${mime_type}" in
        "application/x-tar")
            file_type="tar"
            ;;
        "application/gzip"|"application/x-gzip"|"application/x-xz")
            # Check if the filename looks like a tar file.
            # Most packages now use .tar. in the name, not so many use
            # custom extensions like .tgz (tbz2, txz, tzst, !!)
            if [[ "${filename}" == *.tar.* ]] || [[ "${filename}" == *.tgz ]]; then
                file_type="tar"
            else
                print_error "Cannot identify compressed archive for: ${filename}"
                exit 1
            fi
            ;;
        "application/zip")
            file_type="zip"
            ;;
        *)
            print_error "Cannot unpack unknown mime type (${mime_type}) for: ${filename}"
            exit 1
            ;;
    esac

    case "${file_type}" in
        "tar")
            print_ok "Unpacking tar: ${filename}"
            mkdir -p "${PACKAGE_SOURCE_DIR}" || {
                print_error "Failed to create package source dir: ${PACKAGE_SOURCE_DIR}";
                exit 1
            }
            tar -xf "${PACKAGE_FILE}" -C "${PACKAGE_SOURCE_DIR}" --strip-components=1 || {
                print_error "Failed to unpack tar: ${filename}"
                exit 1
            }
            ;;

        "zip")
            print_ok "Unpacking zip: ${filename}"
            mkdir -p "${PACKAGE_SOURCE_DIR}" || {
                print_error "Failed to create package source dir: ${PACKAGE_SOURCE_DIR}";
                exit 1
            }
            unzip -q "${PACKAGE_FILE}" -d "${PACKAGE_SOURCE_DIR}" || {
                print_error "Failed to unpack zip: ${filename}"
                exit 1
            }
            ;;

        *)
            ;;
    esac
}

# Build source package.
#
# This is not expected to be called except for virtual packages, as we don't
# know how to build any package ourselves.
builtin_build() {
    if [[ -v BUILTIN_FETCH_NONE ]] && [[ -v BUILTIN_UNPACK_NONE ]]; then
        # and since the user did not define a build() function, then this is a
        # special case, this is a virtual package.
        print_debug "builtin_build(): determined we are a virtual package."
    fi
}

# Clean source package.
#
# Uses global variables:
#   PACKAGE_SOURCE_DIR
#
# Returns 0 (true) when done.
builtin_clean_source() {
    if [[ ! -v PACKAGE_SOURCE_DIR ]] || [[ -z "${PACKAGE_SOURCE_DIR}" ]]; then
        print_error "Cannot clean source, PACKAGE_SOURCE_DIR is not set"
        exit 1
    fi
    print_ok "Cleaning package source."
    rm -rf "${PACKAGE_SOURCE_DIR}"
    rm -f "${BUILD_LOG}"

    return 0
}

# Clean output files.
#
# Uses global variables:
#   HEADERS                 - package variable
#   LIBRARIES               - package variable
#   FRAMEWORKS              - package variable
#   HEADERS_ROOT
#   LIBRARIES_PLATFORM_ROOT
#   FRAMEWORKS_ROOT
builtin_clean_output() {
    local did_something=0
    for targetname in "${HEADERS[@]}"; do
        if [[ -e "${HEADERS_ROOT:?}/${targetname}" ]]; then
            rm -rf "${HEADERS_ROOT:?}/${targetname}"
            did_something=1
        fi
    done
    for targetname in "${LIBRARIES[@]}"; do
        if [[ -e "${LIBRARIES_PLATFORM_ROOT:?}/${targetname}" ]]; then
            rm -rf "${LIBRARIES_PLATFORM_ROOT:?}/${targetname}"
            did_something=1
        fi
    done
    for targetname in "${FRAMEWORKS[@]}"; do
        if [[ -e "${FRAMEWORKS_ROOT:?}/${targetname}" ]]; then
            rm -rf "${FRAMEWORKS_ROOT:?}/${targetname}"
            did_something=1
        fi
    done
    if [[ $did_something -eq 1 ]]; then
        print_ok "Cleaned output files."
    else
        print_debug "builtin_clean_output(): nothing to clean."
    fi
}

# Check output files / directories exist. Used to determine if the package
# has been installed.
#
# Uses global variables:
#   PLATFORM
#   HEADERS                 - package variable
#   LIBRARIES               - package variable
#   FRAMEWORKS              - package variable
#   HEADERS_ROOT
#   LIBRARIES_PLATFORM_ROOT
#   FRAMEWORKS_ROOT
#
# Returns 0 (true) if all output exist, 1 if any are missing.
builtin_check_output() {
    if [[ ${#LIBRARIES[@]} -eq 0 ]] && [[ ${#HEADERS[@]} -eq 0 ]] && [[ ${#FRAMEWORKS[@]} -eq 0 ]]; then
        print_debug "builtin_check_output(): HEADERS, LIBRARIES and FRAMEWORKS are empty."
        return 1  # Return 1 so build is still triggered.
    fi
    local library_result=0
    local framework_result=0
    local header_result=0
    for targetname in "${LIBRARIES[@]}"; do
        if [[ ! -e "${LIBRARIES_PLATFORM_ROOT:?}/${targetname}" ]]; then
            library_result=1
            break
        fi
    done
    for targetname in "${HEADERS[@]}"; do
        if [[ ! -e "${HEADERS_ROOT:?}/${targetname}" ]]; then
            header_result=1
            break
        fi
    done
    for targetname in "${FRAMEWORKS[@]}"; do
        if [[ ! -e "${FRAMEWORKS_ROOT:?}/${targetname}" ]]; then
            framework_result=1
            break
        fi
    done

    if [[ "${PLATFORM}" == 'macOS' ]]; then
        # On macOS, at least:
        #   library_result AND header_result
        #   OR
        #   framework_result
        # must be true for the package to be considered installed.
        if [[ ${library_result} -ne 0 ]] || [[ ${header_result} -ne 0 ]]; then
            # library or header failed
            if [[ ${framework_result} -ne 0 ]]; then
                # framework failed
                return 1
            fi
        fi
    else
        if [[ ${library_result} -ne 0 ]] || [[ ${header_result} -ne 0 ]]; then
            return 1
        fi
    fi

    print_ok "All output files exist."
    return 0    # All checks passed.
}

# Build all listed dependencies, and then this package.
#
builtin_deps_all() {
    _ensure_not_visited

    _call_dependencies "all"

    # Ok to continue to build this package.
}

# Clean all listed dependencies, and then this package.
#
builtin_deps_clean_all() {
    _ensure_not_visited

    _call_dependencies "clean-all"

    # Ok to continue to clean this package.
}

# --- Internal functions ---

# We have caught exit, if it was an error, then print a message to the
# log file.
_exit_handler() {
    local exit_code=$?

    if [[ $exit_code -eq 255 ]]; then
        # Special exit code for dependencies that skip themselves.
        # Do nothing, say nothing, exit successfully.
        print_debug "_exit_handler(): exit code 255, skipping."
    elif [[ $exit_code -ne 0 ]]; then
        # Non-zero exit code.
        stop_timer_error "PACKAGE_TIMER" "Package elapsed time until error:"
        if [[ -v BUILD_LOG ]] && [[ -r "${BUILD_LOG}" ]]; then
            # See if there's a non-empty build log for the user.
            local build_log_size
            build_log_size=$(wc -c < "${BUILD_LOG}")
            if [[ $build_log_size -gt 0 ]]; then
                print_error "See build log for errors: ${BUILD_LOG}"
            fi
        fi
    else
        if [[ -v HAVE_PRINTED_TITLE ]]; then
            # Only print the elapsed time if we have printed any output
            # to the user before exiting.
            stop_timer_ok "PACKAGE_TIMER" "Package elapsed time:"
        fi
    fi

    print_debug "Reached end of exit handler with exit code: ${exit_code}"

    exit $exit_code
}

# Ensure we have not already been visited as part of a dependency chain.
# This is used to prevent infinite loops.
_ensure_not_visited() {
    # Check if we have already been visited.
    if [[ -v PACKAGES_VISITED ]]; then
        print_debug "_ensure_not_visited(): PACKAGES_VISITED: ${PACKAGES_VISITED}"
        declare -a PACKAGES_VISITED_ARRAY
        IFS=':' read -ra PACKAGES_VISITED_ARRAY <<< "${PACKAGES_VISITED}"
        local visited
        for visited in "${PACKAGES_VISITED_ARRAY[@]}"; do
            if [[ -z "${visited}" ]]; then
                continue
            fi
            if [[ "${visited}" == "${PACKAGE_NAME}" ]]; then
                print_debug "_ensure_not_visited(): We were already visited, exiting early."
                exit 255  # Nothing further to do, return special code.
            fi
        done
    fi

    # Add this package name to the list of visited packages so far.
    if [[ -v PACKAGES_VISITED ]]; then
        PACKAGES_VISITED="${PACKAGES_VISITED}:${PACKAGE_NAME}"
    else
        PACKAGES_VISITED="${PACKAGE_NAME}"
    fi
    export PACKAGES_VISITED
}

# Call all dependencies with the given action.
#
# $1 - Action.
_call_dependencies() {
    print_debug "_call_dependencies(): DEPENDENCIES: ${DEPENDENCIES[*]}"

    # Find each dependency and call their build.sh script
    local dependency
    local dep_result
    declare -a dep_ok
    for dependency in "${DEPENDENCIES[@]}"; do
        if [[ -z "${dependency}" ]]; then
            continue
        fi
        if [[ ! -d "../${dependency}" ]]; then
            print_error "Cannot find required dependency: $dependency"
            exit 1
        fi
        print_debug "_call_dependencies(): Calling: \"$dependency/build.sh\" $1"
        ../"${dependency}/build.sh" "$1"
        dep_result=$?
        if [[ dep_result -eq 255 ]]; then
            # Dependency skipped itself, do nothing
            print_debug "_call_dependencies(): Dependency skipped itself, doing nothing."
            continue
        elif [[ $dep_result -ne 0 ]]; then
            # We are going to exit here, but we want to list the successsful
            # dependencies first.
            local i
            for i in "${dep_ok[@]}"; do
                print_ok "Completed dependency: $i"
            done
            print_error "Failed to build dependency: $dependency"
            exit 1
        fi
        dep_ok+=("$dependency")
    done

    # If we got this far, then all dependencies performed action successfully.
    local i
    for i in "${dep_ok[@]}"; do
        print_ok "Completed dependency: $i"
    done
}


# Print's a formatted message to stdout.
#
# In format of: "[$PACKAGE_NAME] $1 $2"
#
# If this is the first printed output (non debug output), then a title line
# is printed first.
#
# Sets global variables:
#   HAVE_PRINTED_TITLE          - only defined if we have printed a title.
#
# $1 - Indicator - Two characters, possibly with colours.
# $2 - Message to print.
_print() {
    if [[ ! -v PACKAGE_NAME ]]; then
        DESCRIPTION="-----";
        PACKAGE_NAME="-----";
    fi

    if [[ ! -v HAVE_PRINTED_TITLE ]]; then
        # Print a title line.
        printf "\n  ==== %s [%s] ====\n" "${DESCRIPTION}" "${PACKAGE_NAME}"
        HAVE_PRINTED_TITLE=1
    fi

    if [[ $FORCE_COLOUR -eq 1 ]] || [[ -t 1 ]]; then
        # We are in a terminal, use colours.
        printf "[${COL_YELLOW}%s${COL_CLEAR}] %s %s\n" "${PACKAGE_NAME}" "$1" "$2"
    else
        printf "[%s] %s %s\n" "${PACKAGE_NAME}" "$1" "$2"
    fi
}

_usage() {
    echo ""
    echo "[ $DESCRIPTION ($PACKAGE_NAME) ]"
    echo ""
    echo "Usage: build.sh [options] [action]"
    echo "  options:"
    echo "    -h, --help      Show this help message."
    echo "    -j n            Number of parallel jobs to use. Default on this host: ${JOBS}"
    echo ""
    echo "  actions:"
    echo "    info            Show package information."
    echo "    all             Default. Build dependencies, and then this package."
    echo "    build           Build only this package, without dependencies."
    echo "    clean           Clean only this package source and output files."
    echo "    clean-all       Clean dependencies, and then this package."
    echo ""
}

_display_package_info() {
    print_plain "Package name: ${PACKAGE_NAME}"
    print_plain "Description: ${DESCRIPTION}"
    print_plain "Dependencies: ${DEPENDENCIES[*]}"
}

# Parse command line arguements. Show usage if needed.
#
# Sets global variables:
#   PACKAGE_ACTION
#   JOBS
_parse_args() {
    PACKAGE_ACTION='all'        # Default

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                _usage
                exit 0
                ;;
            -j)
                JOBS="$2"
                shift 2
                ;;
            info|all|build|clean-all|clean)
                PACKAGE_ACTION="$1"
                shift
                ;;
            *)
                _usage
                echo "!! Unknown argument: $1"
                exit 1
        esac
    done

    print_debug "PACKAGE_ACTION: ${PACKAGE_ACTION}"
}

# Check if the given file matches the given hash.
_check_file_hash() {
    local file="$1"
    local hash="$2"

    local hash_type
    local hash_value
    hash_type="${hash%%:*}"
    hash_value="${hash#*:}"

    if [[ ! -f "${file}" ]]; then
        print_error "File does not exist: ${file}"
        exit 1
    fi

    local calculated_hash
    case "${hash_type}" in
        SHA256)
            if [[ "${PLATFORM}" == 'macOS' ]]; then
                calculated_hash=$(shasum -a 256 "${file}" | awk '{print $1}')
            else
                calculated_hash=$(sha256sum "${file}" | awk '{print $1}')
            fi
            ;;
        MD5)
            if [[ "${PLATFORM}" == 'macOS' ]]; then
                calculated_hash=$(md5 -q "${file}")
            else
                calculated_hash=$(md5sum "${file}" | awk '{print $1}')
            fi
            ;;
        *)
            print_error "Unknown hash type: ${hash_type}"
            exit 1
            ;;
    esac

    if [[ "${calculated_hash}" == "${hash_value}" ]]; then
        return 0
    fi

    return 1
}

# Sets global variables:
#   OS
#   ARCH
#   JOBS
#   PLATFORM
_identify_os_arch() {
    # Identify the OS and architecture.
    OS=$(uname -s)		# Linux|Darwin
    ARCH=$(uname -m)	# x86_64|aarch64|arm64
    JOBS=1              # Number of parallel jobs
    if [[ $OS = 'Darwin' ]]; then
        PLATFORM='macOS'
        JOBS=$(($(sysctl -n hw.logicalcpu) + 1))
    elif [[ $OS = 'Linux' ]]; then
        JOBS=$(($(nproc) + 1))
        if [[ $ARCH = 'aarch64' ]]; then
            PLATFORM='linuxARM'
        elif [[ $ARCH = 'x86_64' ]]; then
            PLATFORM='linux'
        fi
    fi
    if [[ "${PLATFORM}X" = 'X' ]]; then     # $PLATFORM is empty
        echo "!! Unknown OS/ARCH: $OS/$ARCH"
        exit 1
    fi
}

# Sets global variables:
#   PROJECT_ROOT                - derived from this sourced script's location
#   SOURCE_PLATFORM_ROOT        - calculated from PROJECT_ROOT + PLATFORM
#   HEADERS_ROOT                - derived from PROJECT_ROOT
#   LIBRARIES_PLATFORM_ROOT     - calculated from PROJECT_ROOT + PLATFORM
#   FRAMEWORKS_ROOT             - derived from PROJECT_ROOT
#   PACKAGE_NAME                - derived from sourcing script's location
#   PACKAGE_DOWNLOAD_DIR        - calculated from PROJECT_ROOT
#   PACKAGE_SOURCE_DIR          - calculated from SOURCE_PLATFORM_ROOT + PACKAGE_NAME
#   BUILD_LOG                   - calculated from SOURCE_PLATFORM_ROOT + PACKAGE_NAME
#
_identify_common_paths() {
    PROJECT_ROOT="$(realpath "$(dirname "${BASH_SOURCE[0]}")/../..")"
    SOURCE_PLATFORM_ROOT="${PROJECT_ROOT}/source/${PLATFORM}"
    HEADERS_ROOT="${PROJECT_ROOT}/Output/Headers"
    LIBRARIES_PLATFORM_ROOT="${PROJECT_ROOT}/Output/Libraries/${PLATFORM}"
    FRAMEWORKS_ROOT="${PROJECT_ROOT}/Output/Frameworks"
    PACKAGE_NAME="$(basename "$(dirname "$(realpath "$0")")")"
    PACKAGE_DOWNLOAD_DIR="${PROJECT_ROOT}/source"
    PACKAGE_SOURCE_DIR="${SOURCE_PLATFORM_ROOT}/${PACKAGE_NAME}"
    BUILD_LOG="${SOURCE_PLATFORM_ROOT}/${PACKAGE_NAME}.log"
}

# Unset all known variables set by package file.
_unset_package_variables() {
    local var_names=(
        DESCRIPTION
        DEPENDENCIES
        SOURCE_URL
        SOURCE_HASH
        LIBRARIES
        FRAMEWORKS
        HEADERS
    )
    for i in "${var_names[@]}"; do
        unset "${i}"
    done
}

# Ensure all build functions are defined.
_ensure_build_functions() {
    build_func_names=(
        fetch
        unpack
        build
        clean_source
        clean_output
        check_output
        deps_all
        deps_clean_all
    )
    for func_name in "${build_func_names[@]}"; do
        if [[ $(type -t $func_name) != function ]]; then
            unset $func_name
            eval "
                function $func_name() {
                    builtin_${func_name} \"\$@\"
                    return \$?
                }
            "
        fi
    done

    # DEBUG - Show all our functions are correctly defined.
    #echo "Check functions:"
    #for func_name in "${build_func_names[@]}" "build"; do
    #    declare -f $func_name
    #done
    #exit 0
}

# Returns true (0) if the package source is missing.
#
# Uses global variables:
#   PACKAGE_SOURCE_DIR
_package_source_missing() {
    if [[ ! -d "${PACKAGE_SOURCE_DIR}" ]]; then
        # Directory does not exist.
        print_debug "_package_source_missing(): Directory does not exist: ${PACKAGE_SOURCE_DIR}"
        return 0
    fi
    if [[ -z "$( ls -A "${PACKAGE_SOURCE_DIR}" )" ]]; then
        # Directory is empty.
        print_debug "_package_source_missing(): Directory is empty: ${PACKAGE_SOURCE_DIR}"
        return 0
    fi
    return 1
}

# End of script, call main function.
build_functions_main "$@"
